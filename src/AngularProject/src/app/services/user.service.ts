import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { jwtDecode } from 'jwt-decode';

interface JwtPayload {
  nameid: string;
  name: string;
}

@Injectable({ providedIn: 'root' })
export class UserService {
  private userBaseUrl = 'http://localhost:5189/api/user';

  constructor(private http: HttpClient) {}

  // üíâ –î–µ–∫–æ–¥–∏–º userId –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
  getUserIdFromToken(): number | null {
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('üö´ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    try {
      const decoded: any = jwtDecode(token);


      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–æ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–µ, –∫–∞–∫ –≤ —Ç–æ–∫–µ–Ω–µ
      const userId = decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"];
      return parseInt(userId);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', err);
      return null;
    }
  }

  // üî• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
  getCurrentUser(): Observable<any> {
    const id = this.getUserIdFromToken();
    if (!id) return of(null);

    return this.getUserById(id);
  }

  // üöö –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  getUserById(id: number): Observable<any> {
    return this.http.get(`${this.userBaseUrl}/${id}`);
  }
}
